%BibTeX@Inbook{TheFoundationsOfArithmetic,    title = "The Foundations of Arithmetic",    bookTitle = "The Legacy of Mario Pieri in Geometry and Arithmetic",    year = "2007",    publisher = "Birkh{\"a}user Boston",    address = "Boston, MA",    pages = "289--329",    abstract = "Although primarily a researcher in geometry, Mario Pieri wrote four papers that addressed aspects of arithmetic: 1906d A Look at the New Logico-Mathematical Direction of the Deductive Sciences 1906e On an Arithmetical Definition of the Irrationals (completed in 1905) 1906g On the Consistency of the Axioms of Arithmetic 1907a On the Axioms of Arithmetic The first three are introduced in the following paragraphs, and will be discussed in detail in the second book of the present series. Section 4.1 presents historical background for the 1906e, 1906g, and 1907a papers. The last, On the Axioms of Arithmetic, is translated in entirety in section 4.2 and discussed in detail in section 4.3.",    isbn = "978-0-8176-4603-5",    doi = "10.1007/978-0-8176-4603-5_4",    url = "https://doi.org/10.1007/978-0-8176-4603-5_4"}@online{Typing,    author = {Денис Груздев},    title = {Ликбез по типизации в языках программирования [Электронный ресурс]},    year = {2012},    url = {https://habr.com/ru/articles/161205/},    note = {(Дата обращения 18.04.2024)},    language = {russian},}@incollection{UrbanN2009,    author = {Christian Urban and Tobias Nipkow},    title = {Nominal verification of algorithm {W}},    booktitle = {From Semantics to Computer Science. Essays in Honour of Gilles Kahn},    editor = {G. Huet and J.-J. Lévy and G. Plotkin},    publisher = {Cambridge University Press},    pages = {363--382},    year = 2009}@article{TypeTheoryBook,    author = {Robin Milner},    title = {A theory of type polymorphism in programming},    journal = {Journal of computer and system sciences 17},    pages = {348--375},    year = {1978},}@online{TypeTheoryArticle,    author = {Сергей Свиридов},    title = {Теория типов [Электронный ресурс]},    year = {2023},    note = {(Дата обращения 19.04.2024)},    url = {https://habr.com/ru/articles/758542/},}@online{KotlinTypeSpec,    author = {Marat Akhin, Mikhail Belyaev},    title = {Kotlin language specification},    url = {https://kotlinlang.org/spec/type-system.html},    note = {(Дата обращения 19.04.2024)},}@online{PythonWiki,    title = {Why is Python a dynamic language and also a strongly typed language [Электронный ресурс]},    url = "https://wiki.python.org/moin/Why is Python a dynamic language and also a strongly typed language",    note = {(Дата обращения 21.04.2024)},}@online{CSpec,    title = {C Reference [Электронный ресурс]},    url = {https://en.cppreference.com/w/c},    note = {(Дата обращения 21.04.2024)},}@online{AutoProvement,    author = {Вячеслав Голованов},    title = {Насколько близко компьютеры подошли к автоматическому построению математических рассуждений? [Электронный ресурс]},    url = {https://habr.com/ru/articles/519368/},    note = {(Дата обращения 22.04.2024))},    year = {2020},}@article{GhostCell,    author = {Yanovski, Joshua and Dang, Hoang-Hai and Jung, Ralf and Dreyer, Derek},    title = {GhostCell: separating permissions from data in Rust},    year = {2021},    issue_date = {August 2021},    publisher = {Association for Computing Machinery},    address = {New York, NY, USA},    volume = {5},    number = {ICFP},    url = {https://doi.org/10.1145/3473597},    doi = {10.1145/3473597},    abstract = {The Rust language offers a promising approach to safe systems programming based on the principle of aliasing XOR mutability: a value may be either aliased or mutable, but not both at the same time. However, to implement pointer-based data structures with internal sharing, such as graphs or doubly-linked lists, we need to be able to mutate aliased state. To support such data structures, Rust provides a number of APIs that offer so-called interior mutability: the ability to mutate data via method calls on a shared reference. Unfortunately, the existing APIs sacrifice flexibility, concurrent access, and/or performance, in exchange for safety. In this paper, we propose a new Rust API called GhostCell which avoids such sacrifices by separating permissions from data: it enables the user to safely synchronize access to a collection of data via a single permission. GhostCell repurposes an old trick from typed functional programming: branded types (as exemplified by Haskell’s ST monad), which combine phantom types and rank-2 polymorphism to simulate a lightweight form of state-dependent types. We have formally proven the soundness of GhostCell by adapting and extending RustBelt, a semantic soundness proof for a representative subset of Rust, mechanized in Coq.},    journal = {Proc. ACM Program. Lang.},    month = {aug},    articleno = {92},    numpages = {30},    keywords = {Rust, separation logics, type systems}}@online{Dot,    title = {GraphViz Documentation [Электронный ресурс]},    year = {2022},    url = {https://www.graphviz.org/documentation/},    note = {(Дата обращения 24.04.2024)},}@online{RustMemory,    author = {badcasedaily1},    title = {Как работает управление памятью в Rust без сборщика мусора [Электронный ресурс]},    url = {https://habr.com/ru/companies/otus/articles/787362/},    note = {(Дата обращения 15.04.2024)},}@online{OOP_in_C,    title = {Объектно ориентированное программирование на Си без плюсов [Электронный ресурс]},    url = {https://habr.com/ru/articles/568588/},    note = {(Дата обращения 20.04.2024)},}@book{JavaTypeSystem,    author = {Benjamin J Evans, David Flanagan},    title = {Java in a Nutshell. 7th Ed},    publisher = {O’Reilly Media, Inc.},    year = {2018},    chapter = {The Java Type System},}@book{LambdaCalculus,    title={The Lambda Calculus: Its Syntax and Semantics},    author={Barendregt, H.P.},    isbn={9780444867483},    lccn={84005966},    series={Studies in Logic and the Foundations of Mathematics},    url={https://books.google.ca/books?id=eMtTAAAAYAAJ},    year={1984},    publisher={Elsevier Science}}@inbook{LambdaCalculusWithTypes,    author = {Barendregt, Henk (Hendrik)},    year = {1992},    month = {01},    pages = {117-309},    title = {Lambda Calculi with Types},    volume = {2},    isbn = {0198537611}}