---------------- ТИТУЛЬНЫЙ СЛАЙД ---------------

Добрый день, уважаемые коллеги и члены комиссии. Я, Тришин Илья, представляю вам свою работу по теме «Разработка компонентов графоориентированного программного каркаса для реализации сложных вычислительных методов».

---------------- ВВЕДЕНИЕ ----------------
>  --- CЛАЙД 1 ---
В современной научно-технической среде решения прикладных задач зачастую требуют большого количества вычислительных ресурсов. Для их решения чаще всего используется или создаётся специализированное программное обеспечение. Следует заметить, что практически значимая программная реализация методов решений прикладных задач является нетривиальной.

> --- CЛАЙД 2 ---
Для создания прикладного ПО в приемлемые сроки целесообразно привлечение к его разработке нескольких человек. Распределение между ними обязанностей по реализации отдельных этапов алгоритма ускоряет разработку и повышает общее качество реализуемого продукта. Однако при подключении к проекту новых разработчиков возникает необходимость описывать для них логику реализуемого решения задачи, что существенно усложняет процесс ведения совместных работ.

> --- CЛАЙД 3 ---
На сегодняшний день существуют программные средства, позволяющие упростить разработку ПО для решения прикладных научно-технических задач. В частности, к ним относятся так называемые научные системы управления потоком задач (scientific workflow systems) и платформы малокодовой разработки (LCPD). В научных системах управления потоком задач пользователь формирует формальные описания реализуемых алгоритмов, в соответствии с которыми система автоматически выполняет их этапы. К таким продуктам, в частности, относятся pSeven, Kepler, Pegasus и другие. Платформы малокодовой разработки, в свою очередь, предоставляют различные средства автоматической генерации исходных кодов алгоритмов и их документации по их формальным описаниям. К LCPD относится, в частности, представленная на слайде платформа Node-RED.

> --- CЛАЙД 4 ---
Общим принципом, используемым в данных средствах, является интерпретация некоторого формального описания алгоритма решения задачи. При составлении описаний применяются диаграммы потоков данных, диаграммы потока управления, диаграммы переходов состояний и прочие подходы. Данная работа сосредоточена вокруг подхода, получившего название Graph-based Software Engineering (GBSE).

Данная работа направлена на развитие одной из реализаций GBSE в библиотеке для языка C++ comsdk. Данная библиотека даёт пользователю инструменты для описания реализуемых алгоритмов в виде ориентированных графов и последующего выполнения этапов алгоритмов в соответствие с их описанием с использованием пользовательских реализаций каждого из этапов.

Для обоснования актуальности данного развития было проведено сравнение данной разработки с одним из присутствующих на рынке продуктов, где применяются диаграммы потоков данных. Диаграмма потоков данных представляет собой ориентированный граф, в котором вершинам ставятся процессы обработки данных, а рёбрам -- пути данных между ними. На слайде представлен пример диаграммы потоков данных, описывающей вычисление среднего арифметического и среднего геометрического двух половин массива.

Для сравнения с comsdk была выбрана отечественная платформа оптимизации и анализа данных pSeven. pSeven предназначена для автоматизации сложных процессов проектирования и интеграции внешних программных продуктов и данных в единую расчетную цепочку. Данный продукт даёт пользователю набор инструментов для анализа данных, оптимизации и предсказательного моделирования для решения прикладных инженерных задач.

Сравнение проводилось по признакам, связанными как с особенностями используемых в разработках подходов, так и с особенностями самих программных решений. 

В результате проведённого сравнения у comsdk перед pSeven были выявлены следующие преимущества (Слайд)

Кроме того, были выявлены следующие недостатки (Слайд).

---------------- ЦЕЛИ И ЗАДАЧИ РАЗРАБОТКИ ----------------
Таким образом, актуально развитие программного каркаса comsdk, в связи с чем была поставлена цель -- разработать обновлённые программные средства для создания и интерпретации графовых описаний вычислительных методов в программном каркасе comsdk.

Поскольку поставленные задачи напрямую связаны с реализацией подхода GBSE, целесообразно ввести некоторые его основные понятия.

---------------- ПОСТАНОВКА ЗАДАЧИ ----------------
> --- СЛАЙД ---
В GBSE вводится понятие состояний данных. Они определяют, какие переменные какого типа должны быть определены на данном этапе алгоритма. Элементы состояния данных имеют тип и имя.

> --- СЛАЙД ---
Процессами обработки данных в GBSE служат функции обработчики. Функция-обработчик имеет входное состояние и выходное. При этом она может как модифицировать его, добавляя или убирая из него элементы, так и оставлять его неизменным.

> --- СЛАЙД ---
Поскольку нет гарантий, что программная реализация функций-обработчиков будет идеальной и учитывать все исключительные ситуации, вводится дополнительные объекты, отвечающие за проверку данных и обработку исключительных ситуаций -- функции-предикаты. Объект, совмещающий в себе функцию-предикат и функцию-обработчик, называется функцией перехода. Она проводит предварительную проверку входных данных с помощью функции-предиката и только в случае успеха выполняет их обработку.

> --- СЛАЙД ---
Поскольку подавляющее большинство прикладных алгоритмов содержат в себе условное ветвление, в GBSE введены специальные функции, отвечающие за проверку условий по ходу алгоритма, именуемые селекторами.

> --- СЛАЙД ---
Наконец, графовая модель алгоритма представляет собой ориентированный граф, где вершинам поставлены в соответствие состояния данных, а рёбрам -- функции перехода. На слайде приведён пример графовой модели с обозначенными состояниями данных.

> --- СЛАЙД ---
Важно отметить, что вершины графовой модели помимо поставленного им в соответствие состояния данных имеют ряд атрибутов, а именно имя, функцию-селектор, которая определяет, по каким из исходящих из данной вершины рёбрам должен быть совершён переход, и режим параллельного обхода, который обозначает, какие вычислительные ресурсы должны быть задействованы для одновременного обхода исходящих из вершины ветвей.

> --- СЛАЙД ---
Рёбра графовой модели гораздо проще. Их единственным атрибутом является привязанная к ним функция перехода или группа этих функций.

Таким образом, представления описанных объектов методологии GBSE должны были быть реализованы в виде классов языка С++

> --- СЛАЙД ---
Были сформулированы требования к алгоритму обхода графовой модели. Обойти графовую модель -- значит выполнить необходимые функции перехода при движении от начальной вершины к конечной с учётом условного ветвления, осуществляемого при помощи селекторов.

В представленной на рисунке графовой модели ветви S1->S2->S4 и S1->S3->S4 должны выполняться параллельно. При этом в состоянии S4 результаты работы функций F24 и F34 должны быть объединены. Алгоритм должен иметь возможность задействовать различные вычислительные ресурсы (потоки процессора, процессы, узлы вычислительного кластера) при параллельном обходе.


-------------------------------------------------------------------------------

